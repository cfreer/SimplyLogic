{"version":3,"sources":["TruthTable.js","TextBox.js","App.js","index.js"],"names":["numLiterals","ctx","value","parsed","literals","rows","topLeft","valueSpace","literalList","values","middle","TruthTable","props","drawTruthTable","canvas","current","getContext","submitted","size","clearRect","width","height","strokeStyle","lineWidth","numSpaces","state","Math","pow","drawVerticalLines","length","drawHorizontalLine","writeLiterals","writeTruthValues","writeResult","y","localParsed","i","c","prev","next","combined","set","get","splice","has","not","prevVal","nextVal","and","or","conditional","biconditional","writeText","text","x","Array","from","sort","startX","endX","beginPath","moveTo","lineTo","stroke","firstX","Map","j","divisor","floor","firstLineX","endY","info","style","fontSize","fontFamily","color","textAlign","textBaseline","font","fillStyle","fillText","React","createRef","this","ref","Component","TextBox","type","onChange","handleChange","bool","App","parseValue","result","index","charAt","next2","next3","getLiterals","Set","charCodeAt","add","includes","throwError","reset","setState","alert","textValue","bind","handleSubmit","document","body","backgroundColor","event","target","toUpperCase","replace","align","onClick","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7636ed93.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nlet numLiterals, ctx, value, parsed, literals, rows,\n    topLeft, valueSpace, literalList, values, middle;\n\nclass TruthTable extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 800,\n            height: 800\n        };\n        this.canvas = React.createRef();\n    }\n\n    componentDidUpdate() {\n        value = this.props.value;\n        parsed = this.props.parsed;\n        literals = this.props.literals;\n        this.drawTruthTable();\n    }\n\n    drawTruthTable = () => {\n        let canvas = this.canvas.current;\n        ctx = canvas.getContext('2d');\n        if (this.props.submitted && literals.size > 0) {\n            numLiterals = literals.size;\n            // clears drawing board\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.strokeStyle = 'black';\n            ctx.lineWidth = 2;\n\n            let numSpaces = numLiterals + 1;\n            topLeft = (this.state.width - numSpaces * 100) / 2;\n            rows = Math.pow(2, numLiterals);\n            this.drawVerticalLines();\n\n            valueSpace = 10 * value.length + 50;\n            this.drawHorizontalLine();\n\n            this.writeLiterals();\n\n            this.writeTruthValues();\n\n            this.writeResult();\n        } else if (this.props.submitted) {\n            ctx.clearRect(0, 0, this.state.width, this.state.height);\n        }\n    };\n\n    writeResult = (y) => {\n        // copies parsed\n        let localParsed = [...parsed];\n        // looks for narrowest scope\n        while (localParsed.length > 1) {\n            for (let i = 0; i < localParsed.length; i++) {\n                let c = localParsed[i];\n                let prev = localParsed[i - 1];\n                let next = localParsed[i + 1];\n                if (prev === \"(\" && next === \")\") {\n                    let combined = '' + prev + c + next;\n                    values.set(combined, values.get(c));\n                    localParsed[i + 1] = combined;\n                    localParsed.splice(i - 1, 2);\n                }\n                if (values.has(next)) {\n                    if (c === \"~\") {\n                        let combined = '' + c + next;\n                        values.set(combined, this.not(values.get(next)));\n                        localParsed[i + 1] = combined;\n                        localParsed.splice(i, 1);\n                    }\n                    if (values.has(prev)) {\n                        let combined = '' + prev + c + next;\n                        let prevVal = values.get(prev);\n                        let nextVal = values.get(next);\n                        if (c === \"&\") {\n                            values.set(combined, this.and(prevVal, nextVal));\n                        } else if (c === \"v\") {\n                            values.set(combined, this.or(prevVal, nextVal));\n                        } else if (c === \"->\") {\n                            values.set(combined, this.conditional(prevVal, nextVal));\n                        } else if (c === \"<->\") {\n                            values.set(combined, this.biconditional(prevVal, nextVal));\n                        }\n                        localParsed[i + 1] = combined;\n                        localParsed.splice(i - 1, 2);\n                    }\n                }\n            }\n        }\n        let result = values.get(localParsed[0]);\n        if (result) {\n            this.writeText({text: 'T', x: middle, y: y});\n        } else {\n            this.writeText({text: 'F', x: middle, y: y});\n        }\n    }\n\n    writeLiterals = () => {\n        literalList = Array.from(literals).sort();\n        let x = topLeft + 45;\n        for (let i = 0; i < literalList.length; i++) {\n            this.writeText({text: literalList[i], x: x, y: 5});\n            x += 98;\n        }\n        if (valueSpace > 100) {\n            x -= 20;\n        } else {\n            x -= 47;\n            x += (100 - 10 * value.length) / 2;\n        }\n        this.writeText({text: value, x: x, y: 5});\n    }\n\n    drawHorizontalLine = () => {\n        let startX = topLeft;\n        let startY = 30;\n        let endX = startX + 100 * numLiterals\n        if (valueSpace > 100) {\n            middle = endX + valueSpace / 2 - 5;\n            endX += valueSpace;\n        } else {\n            middle = endX + 45;\n            endX += 100;\n        }\n        let endY = startY;\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n    }\n\n    writeTruthValues = () => {\n        let firstX = topLeft + 45;\n        let y = 15;\n        // row\n        for (let i = 0; i < rows; i++) {\n            y += 30;\n            values = new Map();\n            // col\n            for (let j = 0; j < numLiterals; j++) {\n                let divisor = Math.pow(2, numLiterals - j - 1);\n                let group = Math.floor(i / divisor);\n                // first half of rows\n                if (group % 2 === 0) {\n                    this.writeText({text: 'T', x: firstX + 98 * j, y: y});\n                    values.set(literalList[j], true);\n                } else {\n                    this.writeText({text: 'F', x: firstX + 98 * j, y: y});\n                    values.set(literalList[j], false);\n                }\n            }\n            this.writeResult(y);\n        }\n    }\n\n    drawVerticalLines = () => {\n        let firstLineX = topLeft + 100;\n        for (let i = 0; i < numLiterals; i++) {\n            let startX = firstLineX + 100 * i;\n            let startY = 0;\n            let endX = startX;\n            let endY = startY + (rows + 1) * 30 + 10;\n            ctx.beginPath();\n            ctx.moveTo(startX, startY);\n            ctx.lineTo(endX, endY);\n            ctx.stroke();\n        }\n    }\n\n    writeText = (info, style = {}) => {\n        const {text, x, y} = info;\n        const {fontSize = 20, fontFamily = 'Arial', color = 'black', textAlign = 'left', textBaseline = 'top'} = style;\n        let ctx = this.canvas.current.getContext('2d');\n        ctx.beginPath();\n        ctx.font = fontSize + 'px ' + fontFamily;\n        ctx.textAlign = textAlign;\n        ctx.textBaseline = textBaseline;\n        ctx.fillStyle = color;\n        ctx.fillText(text, x, y);\n        ctx.stroke();\n    }\n\n    and = (x, y) => {\n        return x && y;\n    }\n\n    or = (x, y) => {\n        return x | y;\n    }\n\n    not = (x) => {\n        return !x;\n    }\n\n    conditional = (x, y) => {\n        return this.or(this.not(x), y);\n    }\n\n    biconditional = (x, y) => {\n        return x === y;\n    }\n\n    render() {\n        return (\n            <canvas ref={this.canvas} width={this.state.width} height={this.state.height}/>\n        )\n    }\n}\n\nexport default TruthTable;","import React, {Component} from 'react';\n\nclass TextBox extends Component {\n\n    render() {\n        return (\n            <form>\n                <input type=\"text\" value={this.props.value} onChange={this.props.handleChange}/>\n            </form>\n        );\n    }\n}\n\nexport default TextBox;\n","import React, {Component} from 'react';\nimport \"./Style.css\";\nimport TruthTable from \"./TruthTable\";\nimport TextBox from \"./TextBox\";\n\nlet bool = [\"&\", \"v\", \"~\", \"(\", \")\", \"->\", \"<->\"]\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            textValue: '',\n            value: '',\n            parsed: [],\n            literals: null,\n            submitted: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // Changes the background color to light purple when website first starts.\n    componentDidMount() {\n        document.body.style.backgroundColor = \"#D8BFD8\"\n    }\n\n    handleChange(event) {\n        this.setState({\n            value: event.target.value,\n            textValue: event.target.value, submitted: false\n        });\n    }\n\n    handleSubmit() {\n        this.setState({\n            submitted: true\n        })\n        let value = this.state.value.toUpperCase()\n        value = value.replace(\"V\", \"v\");\n        let parsed = this.parseValue(value);\n        let literals = this.getLiterals(parsed);\n        this.setState({\n            value: value,\n            textValue: '',\n            parsed: parsed,\n            literals: literals\n        });\n    }\n\n    parseValue = (value) => {\n        let result = [];\n        let index = 0;\n        for (let i = 0; i < value.length; i++) {\n            let c = value.charAt(i);\n            // next 2 chars\n            let next2 = '' + c + value.charAt(i + 1);\n            // next 3 chars\n            let next3 = '' + next2 + value.charAt(i + 2);\n            if (next2 === \"->\") {\n                result[index] = next2;\n                i++;\n            } else if (next3 === \"<->\") {\n                result[index] = next3;\n                i += 2;\n            }\n            else {\n                result[index] = c;\n            }\n            index++;\n        }\n        return result;\n    };\n\n    getLiterals = (parsed) => {\n        let result = new Set();\n        for (let i = 0; i < parsed.length; i++) {\n            let c = parsed[i];\n            if (c.charCodeAt(0) >= 65 &&\n                c.charCodeAt(0) <= 90) {\n                result.add(c);\n            } else if (!bool.includes(c)) {\n                this.throwError();\n            }\n        }\n        return result;\n    };\n\n    throwError = () => {\n        this.reset();\n        this.setState({\n            submitted: true\n        });\n        alert(\"Incorrect format.\");\n    }\n\n    reset = () => {\n        this.setState({\n            textValue: '',\n            value: '',\n            parsed: [],\n            literals: null,\n            submitted: false\n        });\n    }\n\n    render() {\n        return (\n            <div align=\"center\">\n                <b><font size=\"6\">Simply Logic</font></b>\n                <br/>\n                <p><font size=\"4\">\n                    Key: and: &, or: v, not: ~, conditional: ->, biconditional: &lt;-> <br/>\n                    Enter a sentence you want to\n                    generate a truth table for:\n                </font></p>\n                <TextBox handleChange={this.handleChange} value={this.state.textValue}/>\n                <button onClick={() => {\n                    this.handleSubmit();\n                }}><font size=\"3\">Submit</font>\n                </button>\n                <br/>\n                <br/>\n                <TruthTable value={this.state.value} parsed={this.state.parsed}\n                            literals={this.state.literals} submitted={this.state.submitted}/>\n                <br/>\n                <br/>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}