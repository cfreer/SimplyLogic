{"version":3,"sources":["TruthTable.js","TextBox.js","App.js","index.js"],"names":["numLiterals","ctx","value","parsed","literals","rows","topLeft","valueSpace","literalList","values","middle","TruthTable","props","drawTruthTable","canvas","current","getContext","error","clearRect","state","width","height","submitted","size","strokeStyle","lineWidth","numSpaces","Math","pow","drawVerticalLines","length","drawHorizontalLine","writeLiterals","writeTruthValues","writeResult","y","localParsed","i","c","prev","next","combined","set","get","splice","has","not","prevVal","nextVal","and","or","conditional","biconditional","writeText","text","x","Array","from","sort","startX","endX","beginPath","moveTo","lineTo","stroke","firstX","Map","j","divisor","floor","firstLineX","endY","info","style","fontSize","fontFamily","color","textAlign","textBaseline","font","fillStyle","fillText","React","createRef","this","ref","Component","TextBox","type","onChange","handleChange","bool","App","parseValue","result","index","charAt","next2","next3","isBinary","isValid","isValidPrev","isValidNext","undefined","isValidParentheses","includes","s","push","last","pop","getLiterals","Set","incorrectSym","isLiteral","throwError","add","charCodeAt","reset","setState","alert","textValue","bind","handleSubmit","document","body","backgroundColor","event","target","toUpperCase","replace","align","onClick","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.ea54b9c1.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nlet numLiterals, ctx, value, parsed, literals, rows,\n    topLeft, valueSpace, literalList, values, middle;\n\nclass TruthTable extends Component {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            width: 800,\n            height: 800\n        };\n        this.canvas = React.createRef();\n    }\n\n    componentDidUpdate() {\n        value = this.props.value;\n        parsed = this.props.parsed;\n        literals = this.props.literals;\n        this.drawTruthTable();\n    }\n\n    drawTruthTable = () => {\n        let canvas = this.canvas.current;\n        ctx = canvas.getContext('2d');\n        if (this.props.error) {\n            ctx.clearRect(0, 0, this.state.width, this.state.height);\n        } else if (this.props.submitted && literals !== null) {\n            numLiterals = literals.size;\n            // clears drawing board\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            ctx.strokeStyle = 'black';\n            ctx.lineWidth = 2;\n\n            let numSpaces = numLiterals + 1;\n            topLeft = (this.state.width - numSpaces * 100) / 2;\n            rows = Math.pow(2, numLiterals);\n            this.drawVerticalLines();\n\n            valueSpace = 10 * value.length + 50;\n            this.drawHorizontalLine();\n            this.writeLiterals();\n            this.writeTruthValues();\n            this.writeResult();\n        }\n    };\n\n    writeResult = (y) => {\n        // copies parsed\n        let localParsed = [...parsed];\n        // looks for narrowest scope\n        while (localParsed.length > 1) {\n            for (let i = 0; i < localParsed.length; i++) {\n                let c = localParsed[i];\n                let prev = localParsed[i - 1];\n                let next = localParsed[i + 1];\n                if (prev === \"(\" && next === \")\") {\n                    let combined = '' + prev + c + next;\n                    values.set(combined, values.get(c));\n                    localParsed[i + 1] = combined;\n                    localParsed.splice(i - 1, 2);\n                }\n                if (values.has(next)) {\n                    if (c === \"~\") {\n                        let combined = '' + c + next;\n                        values.set(combined, this.not(values.get(next)));\n                        localParsed[i + 1] = combined;\n                        localParsed.splice(i, 1);\n                    }\n                    if (values.has(prev)) {\n                        let combined = '' + prev + c + next;\n                        let prevVal = values.get(prev);\n                        let nextVal = values.get(next);\n                        if (c === \"&\") {\n                            values.set(combined, this.and(prevVal, nextVal));\n                        } else if (c === \"v\") {\n                            values.set(combined, this.or(prevVal, nextVal));\n                        } else if (c === \"->\") {\n                            values.set(combined, this.conditional(prevVal, nextVal));\n                        } else if (c === \"<->\") {\n                            values.set(combined, this.biconditional(prevVal, nextVal));\n                        }\n                        localParsed[i + 1] = combined;\n                        localParsed.splice(i - 1, 2);\n                    }\n                }\n            }\n        }\n        let result = values.get(localParsed[0]);\n        if (result) {\n            this.writeText({text: 'T', x: middle, y: y});\n        } else {\n            this.writeText({text: 'F', x: middle, y: y});\n        }\n    }\n\n    writeLiterals = () => {\n        literalList = Array.from(literals).sort();\n        let x = topLeft + 45;\n        for (let i = 0; i < literalList.length; i++) {\n            this.writeText({text: literalList[i], x: x, y: 5});\n            x += 98;\n        }\n        if (valueSpace > 100) {\n            x -= 20;\n        } else {\n            x -= 47;\n            x += (100 - 10 * value.length) / 2;\n        }\n        this.writeText({text: value, x: x, y: 5});\n    }\n\n    drawHorizontalLine = () => {\n        let startX = topLeft;\n        let startY = 30;\n        let endX = startX + 100 * numLiterals\n        if (valueSpace > 100) {\n            middle = endX + valueSpace / 2 - 5;\n            endX += valueSpace;\n        } else {\n            middle = endX + 45;\n            endX += 100;\n        }\n        let endY = startY;\n        ctx.beginPath();\n        ctx.moveTo(startX, startY);\n        ctx.lineTo(endX, endY);\n        ctx.stroke();\n    }\n\n    writeTruthValues = () => {\n        let firstX = topLeft + 45;\n        let y = 15;\n        // row\n        for (let i = 0; i < rows; i++) {\n            y += 30;\n            values = new Map();\n            // col\n            for (let j = 0; j < numLiterals; j++) {\n                let divisor = Math.pow(2, numLiterals - j - 1);\n                let group = Math.floor(i / divisor);\n                // first half of rows\n                if (group % 2 === 0) {\n                    this.writeText({text: 'T', x: firstX + 98 * j, y: y});\n                    values.set(literalList[j], true);\n                } else {\n                    this.writeText({text: 'F', x: firstX + 98 * j, y: y});\n                    values.set(literalList[j], false);\n                }\n            }\n            this.writeResult(y);\n        }\n    }\n\n    drawVerticalLines = () => {\n        let firstLineX = topLeft + 100;\n        for (let i = 0; i < numLiterals; i++) {\n            let startX = firstLineX + 100 * i;\n            let startY = 0;\n            let endX = startX;\n            let endY = startY + (rows + 1) * 30 + 10;\n            ctx.beginPath();\n            ctx.moveTo(startX, startY);\n            ctx.lineTo(endX, endY);\n            ctx.stroke();\n        }\n    }\n\n    writeText = (info, style = {}) => {\n        const {text, x, y} = info;\n        const {fontSize = 20, fontFamily = 'Arial', color = 'black', textAlign = 'left', textBaseline = 'top'} = style;\n        let ctx = this.canvas.current.getContext('2d');\n        ctx.beginPath();\n        ctx.font = fontSize + 'px ' + fontFamily;\n        ctx.textAlign = textAlign;\n        ctx.textBaseline = textBaseline;\n        ctx.fillStyle = color;\n        ctx.fillText(text, x, y);\n        ctx.stroke();\n    }\n\n    and = (x, y) => {\n        return x && y;\n    }\n\n    or = (x, y) => {\n        return x | y;\n    }\n\n    not = (x) => {\n        return !x;\n    }\n\n    conditional = (x, y) => {\n        return this.or(this.not(x), y);\n    }\n\n    biconditional = (x, y) => {\n        return x === y;\n    }\n\n    render() {\n        return (\n            <canvas ref={this.canvas} width={this.state.width} height={this.state.height}/>\n        )\n    }\n}\n\nexport default TruthTable;","import React, {Component} from 'react';\n\nclass TextBox extends Component {\n\n    render() {\n        return (\n            <form>\n                <input type=\"text\" value={this.props.value} onChange={this.props.handleChange}/>\n            </form>\n        );\n    }\n}\n\nexport default TextBox;\n","import React, {Component} from 'react';\nimport \"./Style.css\";\nimport TruthTable from \"./TruthTable\";\nimport TextBox from \"./TextBox\";\n\nlet bool = [\"&\", \"v\", \"~\", \"(\", \")\", \"->\", \"<->\"]\n\nclass App extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            textValue: '',\n            value: '',\n            parsed: [],\n            literals: null,\n            submitted: false,\n            error: false\n        };\n\n        this.handleChange = this.handleChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    // Changes the background color to light purple when website first starts.\n    componentDidMount() {\n        document.body.style.backgroundColor = \"#D8BFD8\"\n    }\n\n    handleChange(event) {\n        this.setState({\n            value: event.target.value,\n            textValue: event.target.value, submitted: false\n        });\n    }\n\n    handleSubmit() {\n        this.setState({\n            submitted: true,\n            error: false\n        })\n        let value = this.state.value.toUpperCase()\n        value = value.replace(\"V\", \"v\");\n        if (!this.isValidParentheses(value)) {\n            this.throwError(\"parentheses\");\n        }\n        let parsed = this.parseValue(value);\n        let literals = this.getLiterals(parsed);\n        this.setState({\n            value: value,\n            textValue: '',\n            parsed: parsed,\n            literals: literals\n        });\n    }\n\n    parseValue = (value) => {\n        let result = [];\n        let index = 0;\n        for (let i = 0; i < value.length; i++) {\n            let c = value.charAt(i);\n            // next 2 chars\n            let next2 = '' + c + value.charAt(i + 1);\n            // next 3 chars\n            let next3 = '' + next2 + value.charAt(i + 2);\n            if (next2 === \"->\") {\n                result[index] = next2;\n                i++;\n            } else if (next3 === \"<->\") {\n                result[index] = next3;\n                i += 2;\n            } else {\n                result[index] = c;\n            }\n            index++;\n        }\n        return result;\n    };\n\n    isBinary = (c) => {\n        return c === \"&\" || c === \"v\" || c === \"->\" || c === \"<->\";\n    }\n\n    isValid = (prev, c, next) => {\n        let isValidPrev = this.isValidPrev(prev);\n        let isValidNext = this.isValidNext(next);\n        if (c === \"~\" || c === \"(\") {\n            return isValidNext && (this.isBinary(prev) ||\n                prev === \"~\" || prev === undefined || prev === \"(\");\n        } else if (this.isBinary(c)) {\n            return isValidPrev && isValidNext;\n        } else if (c === \")\") {\n            return isValidPrev;\n        }\n    }\n\n    isValidParentheses = (value) => {\n        if (!value.includes(\"(\") && !value.includes(\")\")) {\n            return true;\n        }\n        let s = [];\n        for (let i = 0; i < value.length; i++) {\n            let c = value.charAt(i);\n            if (c === \"(\") {\n                s.push(c);\n            }\n            if (c === ')') {\n                if (s.length === 0) {\n                    return false;\n                }\n                let last = s[s.length - 1];\n                if (c === ')' && last === '(') {\n                    s.pop();\n                } else {\n                    return false;\n                }\n            }\n        }\n        return s.length === 0;\n    }\n\n    getLiterals = (parsed) => {\n        let result = new Set();\n        let incorrectSym = new Set();\n        for (let i = 0; i < parsed.length; i++) {\n            let c = parsed[i];\n            let prev = parsed[i - 1];\n            let next = parsed[i + 1];\n            if (this.isLiteral(c)) {\n                if (this.isLiteral(next)) {\n                    this.throwError(\"symbols\");\n                    break;\n                }\n                result.add(c);\n            } else if (!bool.includes(c) && !incorrectSym.has(c)) {\n                this.throwError(c);\n                incorrectSym.add(c);\n            } else if (!this.isValid(prev, c, next)) {\n                this.throwError(\"syntax\");\n                break;\n            }\n        }\n        return result;\n    };\n\n    isLiteral = (c) => {\n        if (c !== undefined) {\n            return c.charCodeAt(0) >= 65 &&\n                c.charCodeAt(0) <= 90;\n        }\n        return false;\n    }\n\n    isValidPrev = (prev) => {\n        return this.isLiteral(prev) || prev === \")\";\n    }\n\n    isValidNext = (next) => {\n        return this.isLiteral(next) || next === \"~\" || next === \"(\";\n    }\n\n    throwError = (c) => {\n        this.reset();\n        this.setState({\n            error: true\n        });\n        if (c === \"parentheses\") {\n            alert(\"Incorrect format: Parentheses don't match.\")\n        } else if (c === \"symbols\") {\n            alert(\"Incorrect format: Cannot have more than one symbol in a row; \" +\n                \"Symbols must be one letter.\")\n        } else if (c === \"syntax\") {\n            alert(\"Incorrect format: Check syntax.\")\n        } else if (c === \" \") {\n            alert(\"Incorrect format: Enter an atomic sentence without spaces.\");\n        } else {\n            alert(\"Incorrect format: \" + c + \" is not a valid character.\");\n        }\n    }\n\n    reset = () => {\n        this.setState({\n            textValue: '',\n            value: '',\n            parsed: [],\n            literals: null,\n            submitted: false\n        });\n    }\n\n    render() {\n        return (\n            <div align=\"center\">\n                <b><font size=\"6\">Simply Logic</font></b>\n                <br/>\n                <p><font size=\"4\">\n                    Key: and: &, or: v, not: ~, conditional: ->, biconditional: &lt;-> <br/>\n                    Enter an atomic sentence you want to\n                    generate a truth table for:\n                </font></p>\n                <TextBox handleChange={this.handleChange} value={this.state.textValue}/>\n                <button onClick={() => {\n                    this.handleSubmit();\n                }}><font size=\"4\">Submit</font>\n                </button>\n                <br/>\n                <br/>\n                <TruthTable value={this.state.value} parsed={this.state.parsed}\n                            literals={this.state.literals} submitted={this.state.submitted}\n                            error={this.state.error}/>\n                <br/>\n                <br/>\n            </div>\n        );\n    }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));"],"sourceRoot":""}